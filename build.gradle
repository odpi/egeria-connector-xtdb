/*
 * SPDX-License-Identifier: Apache-2.0
 * Copyright Contributors to the ODPi Egeria project.
 */


/*
 * Plugins for this parent module only - so just high level project related
 */
plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'idea'
    id 'maven-publish'
    // Checks for unnecessary dependencies
    id 'com.autonomousapps.dependency-analysis' version "1.19.0"
    // helps resolve log implementation clashes
    id 'dev.jacomet.logging-capabilities' version "0.10.0"
    // This plugin helps resolve jakarta/javax dev.jacomet.logging-capabilities
    id 'org.gradlex.java-ecosystem-capabilities' version "1.1"
    id "io.freefair.aggregate-javadoc" version "6.6.3"
}


/*
 * Configuration for all projects - INCLUDING this one
 */

subprojects {

    group = 'org.odpi.egeria'
    version = '4.0'

    // Mostly java, so default to this for now
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    apply plugin: 'org.gradlex.java-ecosystem-capabilities'
    apply plugin: 'dev.jacomet.logging-capabilities'
    apply plugin: 'maven-publish'
    apply plugin: 'com.autonomousapps.dependency-analysis'
    apply plugin: 'com.github.johnrengelman.shadow'


    repositories {
        mavenCentral()
        google()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
            mavenContent {
                snapshotsOnly()
            }
        }
    }

    // ensures we pick up the very latest snapshots when built
    configurations.all {
        // check for updates every build
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }

    /*
     * Dependency Management - to fix versions. Pick up maven build settings for now
     */

    // Assign variables for any constraints
    ext {
        egeriaVersion = '4.0'
        xtdbVersion = '1.23.0'
        clojureVersion = '1.11.1'
    }

    dependencies {
        // This adds constraints (which can be overridden below) for all dependencies egeria uses
        implementation platform("org.odpi.egeria:egeria:${egeriaVersion}")

        // specifies versions if dependencies used in projects
        constraints
                {
                   implementation("com.xtdb:xtdb-core:${xtdbVersion}")
                    implementation("org.clojure:clojure:${clojureVersion}")
                    // Dependencies only required if configured to run with these extras: they will be included in the
                    // 'jar-with-dependencies' by default, but if you do not need them you can remove them and re-build
                    // to get a smaller footprint with less potential CVE exposure.
                    // runtimeOnly("org.apache.lucene:lucene-analyzers-common:${luceneVersion}")
                    runtimeOnly("com.xtdb:xtdb-lucene:${xtdbVersion}")
                    runtimeOnly("com.xtdb:xtdb-rocksdb:${xtdbVersion}")
                    runtimeOnly("com.xtdb:xtdb-lmdb:${xtdbVersion}")
                    runtimeOnly("com.xtdb:xtdb-kafka:${xtdbVersion}")

                    runtimeOnly("com.xtdb:xtdb-jdbc:${xtdbVersion}")
                    runtimeOnly("com.xtdb:xtdb-s3:${xtdbVersion}")

                    runtimeOnly("com.xtdb:xtdb-metrics:${xtdbVersion}")
                 }
    }

    /*
     * Java related configuration
     */
    java {
        withSourcesJar()
        withJavadocJar()
    }
    tasks.withType(JavaCompile) {
        options.release = 17
        options.encoding = 'UTF-8'
        options.incremental = true
        options.failOnError = true
        options.compilerArgs << "-Xlint:all"
    }

    // javadoc
    javadoc {
        options.addBooleanOption('html5', true) // default
    }

    // code coverage
    jacoco {
        toolVersion = "0.8.8"
    }

    // Uber jar
    shadowJar {
        archiveClassifier = 'jar-with-dependencies'
    }
    // Testing
    test {
        useTestNG()

        testLogging {
            events "passed", "skipped", "failed"
        }

        reports {
            html.required = true
        }
        // This will default to standard search pattern - see https://docs.gradle.org/current/userguide/java_testing.html#sec:test_detection
        scanForTestClasses = false
    }
    /*
     * Publishing of maven artifacts -- and signing (only for CI)
     */
    apply plugin: 'signing'


    publishing {
        publications {
            mavenmodule(MavenPublication) {
                from components.java
                pom {
                    url = 'http://egeria.odpi.org'
                    licenses {
                        // Code
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                        // Docs
                        license {
                            name = 'Creative Commons Attribution 4.0 International (CC BY 4.0)'
                            url = 'https://creativecommons.org/licenses/by/4.0'
                        }
                    }
                    developers {
                        developer {
                            id = 'cmgrote'
                            name = 'Christopher Grote'
                            email = 'chris@thegrotes.net'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/odpi/egeria-connector-xtdb.git'
                        developerConnection = 'scm:git:ssh://github.com/odpi/egeria/egeria-connector-xtdb.git'
                        url = 'http://github.com/odpi/egeria-connector-xtdb'
                    }
                }
                // Override the project name & description for the pom based on properties set in the child build.gradle (hard to default & required for maven central)
                pom.withXml {
                    asNode().appendNode('name', "${project.name}")
                    asNode().appendNode('description', "${project.description}")
                }
            }
        }
        // Release versions get pushed to staging area on maven central, snapshots to snapshot repo
        // Secrets for credentials
        repositories {
            maven {
                name = 'OSSRH'
                def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
                def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                // User token (under profile) on oss.sonatype.org
                credentials {
                    username = System.getenv("OSSRH_USERNAME")
                    password = System.getenv("OSSRH_TOKEN")
                }
            }
        }
    }


} // end of subProjects


apply plugin: 'java' // this is enough to ensure the build can be launched from the root project
// Additional useful tasks
task printAllDependencies(type: DependencyReportTask) {}
task printSubDependencies(type: DependencyReportTask) {}
task findDependency(type: DependencyInsightReportTask) {}


/*
 * Additional aggregate tasks run only at parent
 */

// Jacoco reporting -- from gradle docs
task codeCoverageReport(type: JacocoReport) {
    // Gather execution data from all subprojects
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects
    subprojects.each {
        sourceSets it.sourceSets.main
    }

    // enable the different report types (html, xml, csv)
    reports {
        // xml is usually used to integrate code coverage with
        // other tools like SonarQube, Coveralls or Codecov
        xml.required = true

        // HTML reports can be used to see code coverage
        // without any external tools
        html.required = true
        csv.required = true
    }

}
// always run the tests before generating the report
codeCoverageReport.dependsOn {
    subprojects*.test
}

// Dependency checking - see https://github.com/autonomousapps/dependency-analysis-android-gradle-plugin
dependencyAnalysis {
    issues {
        all {
            onAny {
                severity('fail')
            }
            //onUnusedDependencies {
            //    exclude("com.fasterxml.jackson.core:jackson-annotations")
            //}
        }
    }
}

// Always run dependency check for every regular build
build.dependsOn("buildHealth")
